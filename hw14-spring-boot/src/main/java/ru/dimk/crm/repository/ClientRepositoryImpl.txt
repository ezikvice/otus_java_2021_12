package ru.dimk.crm.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;
import ru.dimk.crm.model.Client;

import java.util.*;

@Repository
public class ClientRepositoryImpl implements ClientRepository {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public ClientRepositoryImpl(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public <S extends Client> S save(S entity) {
        Long clientUuid = UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE;
        Client client =  new Client(clientUuid, entity.getName(), entity.getAddress(), entity.getPhones());
        jdbcTemplate.update("INSERT INTO clients(id, name, address_id) VALUES (?, ? ,?)",
                client.getId(), client.getName(), null);
        return (S)client;
    }

    @Override
    public <S extends Client> Iterable<S> saveAll(Iterable<S> entities) {
        return null;
    }

    @Override
    public Optional<Client> findById(Long aLong) {
        return Optional.empty();
    }

    @Override
    public boolean existsById(Long aLong) {
        return false;
    }

    @Override
    public Iterable<Client> findAll() {
        List<Map<String, Object>> rows = jdbcTemplate.queryForList("SELECT * FROM clients");
        List<Client> clients = new ArrayList<>();
        for (Map<String, Object> row : rows) {
            Client client = new Client();
            client.setId((Long)row.get("id"));
            client.setName((String) row.get("name"));
            clients.add(client);
        }
        return clients;
    }

    @Override
    public Iterable<Client> findAllById(Iterable<Long> longs) {
        return null;
    }

    @Override
    public long count() {
        return 0;
    }

    @Override
    public void deleteById(Long aLong) {

    }

    @Override
    public void delete(Client entity) {

    }

    @Override
    public void deleteAllById(Iterable<? extends Long> longs) {

    }

    @Override
    public void deleteAll(Iterable<? extends Client> entities) {

    }

    @Override
    public void deleteAll() {

    }
}
